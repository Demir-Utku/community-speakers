name: Add New Speaker

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  add-speaker:
    if: github.event.label.name == 'approved'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create script
        run: |
          cat > process-speaker.js << 'EOF'
          const fs = require('fs');

          // Read the current speakers.json
          const speakersFile = fs.readFileSync('speakers.json', 'utf8');
          const speakersData = JSON.parse(speakersFile);

          // Get issue body from environment variable
          const issueBody = process.env.ISSUE_BODY;

          // Parse the markdown content
          function parseIssueBody(body) {
            const lines = body.split('\n');
            let speaker = {
              name: '',
              expertise: [],
              bio: '',
              image: '',
              email: '',
              linkedin: '',
              twitter: '',
              pastEvents: []
            };
            
            let currentSection = '';
            
            for (const line of lines) {
              if (line.includes('**Name:**')) {
                currentSection = 'name';
                continue;
              } else if (line.includes('**Expertise:**')) {
                currentSection = 'expertise';
                continue;
              } else if (line.includes('**Bio:**')) {
                currentSection = 'bio';
                continue;
              } else if (line.includes('**Image URL:**')) {
                currentSection = 'image';
                continue;
              } else if (line.includes('**Contact Information:**')) {
                currentSection = 'contact';
                continue;
              } else if (line.includes('**Past Events:**')) {
                currentSection = 'events';
                continue;
              }
              
              const trimmedLine = line.trim();
              if (trimmedLine && !trimmedLine.startsWith('<!--')) {
                switch(currentSection) {
                  case 'name':
                    if (!trimmedLine.includes('**')) {
                      speaker.name = trimmedLine;
                    }
                    break;
                  case 'expertise':
                    if (trimmedLine.startsWith('-')) {
                      speaker.expertise.push(trimmedLine.substring(1).trim());
                    }
                    break;
                  case 'bio':
                    if (!trimmedLine.includes('**')) {
                      speaker.bio = trimmedLine;
                    }
                    break;
                  case 'image':
                    if (!trimmedLine.includes('**')) {
                      speaker.image = trimmedLine;
                    }
                    break;
                  case 'contact':
                    if (trimmedLine.startsWith('- Email:')) {
                      speaker.email = trimmedLine.split(':')[1].trim();
                    } else if (trimmedLine.startsWith('- LinkedIn:')) {
                      speaker.linkedin = trimmedLine.split(':')[1].trim();
                    } else if (trimmedLine.startsWith('- Twitter:')) {
                      speaker.twitter = trimmedLine.split(':')[1].trim();
                    }
                    break;
                  case 'events':
                    if (trimmedLine.startsWith('-')) {
                      speaker.pastEvents.push(trimmedLine.substring(1).trim());
                    }
                    break;
                }
              }
            }
            
            return speaker;
          }

          // Parse the issue and create speaker object
          const newSpeaker = parseIssueBody(issueBody);

          // Add the new speaker to the array
          speakersData.speakers.push(newSpeaker);

          // Write back to speakers.json
          fs.writeFileSync('speakers.json', JSON.stringify(speakersData, null, 2));
          EOF

      - name: Process Issue and Update Speakers
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          node process-speaker.js

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "Add new speaker: ${{ github.event.issue.title }}"
          title: "Add new speaker: ${{ github.event.issue.title }}"
          body: |
            Adds new speaker from issue #${{ github.event.issue.number }}
            
            This PR was automatically created by the Add Speaker workflow.
          branch: add-speaker-${{ github.event.issue.number }}
          delete-branch: true
          labels: |
            automated-pr
            speaker-addition

      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: 'âœ… A Pull Request has been created to add this speaker to speakers.json'
            }); 
